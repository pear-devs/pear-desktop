// Native module wrapper for Rust audio processor
// This will be generated by napi-rs at build time

export * from './index.d';

let nativeModule: any = null;

export function loadNativeModule(): typeof nativeModule {
  if (nativeModule) {
    return nativeModule;
  }

  try {
    // Try to load the native module based on platform
    const platform = process.platform;
    const arch = process.arch;
    
    // napi-rs generates modules with naming: pear-audio-processor.{platform}.node
    // The actual path will be determined at runtime based on the built artifact
    const modulePath = `../rust/target/release/pear-audio-processor.${platform}.node`;
    
    // In production, the module will be in the electron-builder output
    // For development, we'll need to build it first
    nativeModule = require(modulePath);
    return nativeModule;
  } catch (error) {
    console.warn('[Pear Desktop] Failed to load Rust audio processor, falling back to Web Audio API');
    console.warn(error);
    return null;
  }
}

// Re-export types and classes with runtime loading
export function createBiquadFilter(config: any, sampleRate: number) {
  const module = loadNativeModule();
  if (!module) {
    return null;
  }
  return new module.BiquadFilter(config, sampleRate);
}

export function createEqualizer(filterConfigs: any[], sampleRate: number) {
  const module = loadNativeModule();
  if (!module) {
    return null;
  }
  return new module.Equalizer(filterConfigs, sampleRate);
}

